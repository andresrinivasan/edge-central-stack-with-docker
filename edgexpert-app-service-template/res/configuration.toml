# TODO: Go here for detailed information on Application Service configuration:
#       https://docs.edgexfoundry.org/2.3/microservices/application/GeneralAppServiceConfig/
[Writable]
LogLevel = "DEBUG"

  [Writable.StoreAndForward]
  Enabled = false
  RetryInterval = "5m"
  MaxRetryCount = 10

  [Writable.InsecureSecrets]
    [Writable.InsecureSecrets.DB]
    path = "redisdb"
      [Writable.InsecureSecrets.DB.Secrets]
      username = ""
      password = ""
    # TODO: Remove if not using HTTPS Webserver
    [Writable.InsecureSecrets.HTTPS]
    path = "https"
      [Writable.InsecureSecrets.HTTPS.Secrets]
      cert = ""
      key = ""

  [Writable.Telemetry]
  Interval = "30s"
  PublishTopicPrefix  = "edgex/telemetry" # /<service-name>/<metric-name> will be added to this Publish Topic prefix
    [Writable.Telemetry.Metrics] # All service's metric names must be present in this list.
    # TODO: Remove sample custom metric and implement meaningful custom metrics if any needed.
    # Custom App Service Metrics
    EventsConvertedToXML = true
    # App SDK provided Metrics
    MessagesReceived = true
    InvalidMessagesReceived = true
    PipelineMessagesProcessed = true # Pipeline IDs are added as the tag for the metric for each pipeline defined
    PipelineMessageProcessingTime = true # Pipeline IDs are added as the tag for the metric for each pipeline defined
    PipelineProcessingErrors = true # Pipeline IDs are added as the tag for the metric for each pipeline defined
    HttpExportSize = true # Single metric used for all HTTP Exports
    MqttExportSize = true # BrokerAddress and Topic are added as the tag for this metric for each MqttExport defined
    # Common Security Service Metrics
    SecuritySecretsRequested = true
    SecuritySecretsStored = true
    SecurityConsulTokensRequested = true
    SecurityConsulTokenDuration = true
    [Writable.Telemetry.Tags] # Contains the service level tags to be attached to all the service's metrics
#    Gateway="my-iot-gateway" # Tag must be added here or via Consul Env Override can only change existing value, not added new ones.

    # TODO: If your service reads functions pipeline settings from configuration, uncomment this section and replace
    #       below functions with built in and/or your custom functions according to your needs.
#    [Writable.Pipeline]
#    UseTargetTypeOfByteArray = false
#    ExecutionOrder = "FilterByDeviceName, LogEventDetails, ConvertEventToXML, OutputXML"
#    [Writable.Pipeline.Functions.FilterByDeviceName]
#      [Writable.Pipeline.Functions.FilterByDeviceName.Parameters]
#      DeviceNames = "Random-Boolean-Device, Random-Integer-Device, Random-UnsignedInteger-Device, Random-Float-Device"
#      FilterOut = "false"
#    [Writable.Pipeline.Functions.LogEventDetails]
#      [Writable.Pipeline.Functions.LogEventDetails.Parameters]
#      LogBinaryValue = "false"
#    [Writable.Pipeline.Functions.ConvertEventToXML]
#    [Writable.Pipeline.Functions.OutputXML]


    # Pipeline Per Topic is new for EdgeX 2.0.1 and EdgeXpert 2.0.0.
    # This feature allows multiple pipelines to be configured in the [Writable.Pipeline.PerTopicPipelines] section and
    # only available when using the Edgex MessageBus Trigger or the External MTT Trigger. These per topic pipelines will
    # only execute if the specified Topic matches the incoming topic and the specified TriggerType matches the type of
    # trigger of incoming data.
    # See <Pipeline Per Topic documentation url TBD> for more details.
    # TODO: This section defines a default pipeline and two Per Topic pipelines:
    #         - Default pipeline: will be executed by http trigger to print the received data to log.
    #         - Per Topic pipeline 1: will be executed by edgex-messagebus trigger to convert the received EdgeX Event to XML format and then pushes back to edgex-messagebus.
    #         - Per Topic pipeline 2: will be executed by external-mqtt trigger to invoke core commands and export the execution result.
    #       To give it a try, uncomment this section and remove above [Writable.Pipeline] section. The configuration of
    #       multiple triggers from line 196 to line 229 should also be uncommented.
#    [Writable.Pipeline]
#    UseTargetTypeOfByteArray = true # set to true if the incoming data is not an EdgeX Event.
#    ExecutionOrder = "PrintDataToLog" # ExecutionOrder for the default pipeline
#    [Writable.Pipeline.PerTopicPipelines]
#      [Writable.Pipeline.PerTopicPipelines.Pipeline1]
#      Id = "Pipeline1"
#      Topics = "edgex/events/#/#/Random-Float-Device/#"
#      ExecutionOrder = "Transform, SetResponseData"
#      TriggerType = "edgex-messagebus"
#      UseTargetTypeOfByteArray = false
#      [Writable.Pipeline.PerTopicPipelines.Pipeline2]
#      Id = "Pipeline2"
#      Topics = "sample/command"
#      ExecutionOrder = "ExecuteCoreCommand, XpertMQTTExport"
#      TriggerType = "external-mqtt"
#      UseTargetTypeOfByteArray = true # set to true if the incoming data is not an EdgeX Event.
#    [Writable.Pipeline.Functions.PrintDataToLog]
#    [Writable.Pipeline.Functions.Transform]
#      [Writable.Pipeline.Functions.Transform.Parameters]
#      Type = "xml"
#    [Writable.Pipeline.Functions.SetResponseData]
#      [Writable.Pipeline.Functions.SetResponseData.Parameters]
#      ResponseContentType = "application/json"
#    [Writable.Pipeline.Functions.ExecuteCoreCommand] # See <ExecuteCoreCommand documentation url TBD> for more details.
#      [Writable.Pipeline.Functions.ExecuteCoreCommand.Parameters]
#      DeviceNameJSONPath = "DeviceName"
#      CommandNameJSONPath = "CommandName"
#      BodyJSONPath = "Body"
#      RequestMethodJSONPath = "RequestMethod"
#      ContinueOnError = "true"
#    [Writable.Pipeline.Functions.XpertMQTTExport] # See <XpertMQTTExport documentation url TBD> for more details.
#      [Writable.Pipeline.Functions.XpertMQTTExport.Parameters]
#      ExportMode = 'mqtt'
#      BrokerAddress = 'tcp://localhost:1883'
#      Topic = 'sample/result'
#      authMode = 'none'

[Service]
HealthCheckInterval = "10s"
Host = "localhost"
# TODO: Set this port appropriately,
#       App service use port assignments 597xx with lower range 00-39 reserved for
#       app-service-configurable profiles/instances, Rules Engine and examples
Port = 59740
ServerBindAddr = "" # Leave blank so default to Host value unless different value is needed.
StartupMsg = "new-app-service Application Service has started"
MaxResultCount = 0 # Not currently used by App Services.
MaxRequestSize = 0 # Not currently used by App Services.
RequestTimeout = "5s"

# TODO: Remove section if not using HTTPS Webserver. Default protocol is HTTP if section is empty
[HttpServer]
Protocol = "http"
SecretName = "https"
HTTPSCertName = "cert"
HTTPSKeyName = "key"

[Registry]
Host = "localhost"
Port = 8500
Type = "consul"

[Database]
Type = "redisdb"
Host = "localhost"
Port = 6379
Timeout = "30s"

# TODO: Determine if your service will use secrets in secure mode, i.e. Vault.
#       if not this section can be removed, but you must make sure this service will be started without --secret or
#       --api-gateway options.
#       Note is database is running in secure more and you have Store and Forward enable you will need to run this
#       service in secure mode.
#       For more details about SecretStore: https://docs.edgexfoundry.org/2.3/microservices/security/Ch-SecretStore/
[SecretStore]
Type = "vault"
Host = "localhost"
Port = 8200
Path = "appservice/"
Protocol = "http"
RootCaCertPath = ""
ServerName = ""
TokenFile = "/tmp/edgex/secrets/new-app-service/secrets-token.json"
  [SecretStore.Authentication]
  AuthType = "X-Vault-Token"
  [SecretStore.RuntimeTokenProvider]
  Enabled = false
  Protocol = "https"
  Host = "localhost"
  Port = 59841
  TrustDomain = "edgexfoundry.org"
  EndpointSocket = "/tmp/edgex/secrets/spiffe/public/api.sock"
  RequiredSecrets = "redisdb"

[Clients]
  # Used for Event client which is used by PushToCoreData function
  [Clients.core-data]
  Protocol = "http"
  Host = "localhost"
  Port = 59880

  # Used for version check on start-up
  [Clients.core-metadata]
  Protocol = "http"
  Host = "localhost"
  Port = 59881

  # Used for Command client which is used by ExecuteCoreCommand function
  [Clients.core-command]
  Protocol = "http"
  Host = "localhost"
  Port = 59882

  [Clients.support-notifications]
  Protocol = "http"
  Host = "localhost"
  Port = 59860

[Trigger]
Type="edgex-messagebus"
  [Trigger.EdgexMessageBus]
  Type = "mqtt"
    [Trigger.EdgexMessageBus.SubscribeHost]
    Host = "localhost"
    Port = 1883
    Protocol = "mqtt"
    SubscribeTopics="edgex/events/#"
    [Trigger.EdgexMessageBus.PublishHost]   # TODO: Remove if service is NOT publishing back to the message bus
    Host = "localhost"
    Port = 1883
    Protocol = "mqtt"
    PublishTopic="event-xml"
    [Trigger.EdgexMessageBus.Optional]
    ClientId ="new-app-service"
    Qos            = "0" # Quality of Service values are 0 (At most once), 1 (At least once) or 2 (Exactly once)
    KeepAlive      = "10" # Seconds (must be 2 or greater)
    Retained       = "false"
    AutoReconnect  = "true"
    ConnectTimeout = "30" # Seconds
    SkipCertVerify = "false"
    authmode = "none"  # change to "usernamepassword", "clientcert", or "cacert" for secure MQTT messagebus.
    secretname = "mqtt-bus"

# TODO: If using redis messagebus, Uncomment this section and remove above [Trigger] section,
#       Otherwise remove this commented out block
#[Trigger]
#Type="edgex-messagebus"
#  [Trigger.EdgexMessageBus]
#  Type = "redis"
#    [Trigger.EdgexMessageBus.SubscribeHost]
#    Host = "localhost"
#    Port = 6379
#    Protocol = "redis"
#    SubscribeTopics="edgex/events/#"
#    [Trigger.EdgexMessageBus.PublishHost]   # TODO: Remove if service is NOT publishing back to the message bus
#    Host = "localhost"
#    Port = 6379
#    Protocol = "redis"
#    PublishTopic="event-xml"
#    [Trigger.EdgexMessageBus.Optional]
#    authmode = "usernamepassword"  # requied for redis messagebus (secure or insecure).
#    secretname = "redisdb"

# TODO: If using multiple triggers, uncomment this section and remove above [Trigger] sections.
#       Otherwise remove this commented out block.
# The value of Trigger Type accepts a comma separated list of trigger types.
# Please notice the following:
#   - Valid built-in trigger types are http, edgex-messagebus, and external-mqtt.
#   - Values are case insensitive.
#   - If the default pipeline is defined, it will consume the data received by the first trigger.
#   - The http trigger can only execute the default pipeline. If using http trigger, put it in the first place of the list.
#[Trigger]
#Type = "http, edgex-messagebus, external-mqtt"
#  [Trigger.EdgexMessageBus]
#  Type = "redis"
#  UseTargetTypeOfByteArray = false
#    [Trigger.EdgexMessageBus.SubscribeHost]
#    Host = "localhost"
#    Port = 6379
#    Protocol = "redis"
#    SubscribeTopics="edgex/events/#"
#    [Trigger.EdgexMessageBus.PublishHost]   # TODO: Remove if service is NOT publishing back to the message bus
#    Host = "localhost"
#    Port = 6379
#    Protocol = "redis"
#    PublishTopic="event-xml"
#    [Trigger.EdgexMessageBus.Optional]
#    authmode = "usernamepassword"  # requied for redis messagebus (secure or insecure).
#    secretname = "redisdb"
#  [Trigger.ExternalMqtt]
#  Url = "tcp://localhost:1883"
#  SubscribeTopics = "sample/#"
#  PublishTopic = ""
#  ClientId = ""
#  ConnectTimeout = "30s"
#  AutoReconnect = false
#  KeepAlive = 60
#  QoS = 0
#  Retain = false
#  SkipCertVerify = false
#  SecretPath = ""
#  AuthMode = "none"

# TODO: Add custom settings needed by your app service or remove if you don't have any settings.
# This can be any Key/Value pair you need.
# For more details see: https://docs.edgexfoundry.org/2.3/microservices/application/GeneralAppServiceConfig/#application-settings
# Example that works with devices from the Virtual Device service:
[ApplicationSettings]
DeviceNames = "Random-Boolean-Device, Random-Integer-Device, Random-UnsignedInteger-Device, Random-Float-Device, Random-Binary-Device"

# TODO: Replace this section with your actual structured custom configuration section
#       or remove if you don't have a need for structured custom configuration
# This can be any structure you need, but it can not contain slices. Use a maps instead of slices.
# For more details see: https://docs.edgexfoundry.org/2.3/microservices/application/GeneralAppServiceConfig/#custom-configuration
[AppCustom]
ResourceNames = "Boolean, Int32, Uint32, Float32, Binary"
SomeValue = 123
  [AppCustom.SomeService]
  Host = "localhost"
  Port = 9080
  Protocol = "http"
